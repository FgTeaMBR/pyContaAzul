import requests


class Products:
    def __init__(self, api, token):
        """
        :param api: Conta Azul API URL

        :param token: Token generated by auth page
        """

        self.TOKEN = token
        self.API_URL = api
        self.HEADERS = {"Authorization": f"Bearer {self.TOKEN}"}

    def get_product_byId(self, product_id):
        """Get product by id.

        :param product_id: (Required). Product ID. (String) ex: e0a928b6-0600-4fb6-929c-fde7b915df2d
        :return: Product ID in dict json.
        """
        # GET
        product_id = f"/v1/products/{product_id}"
        response = requests.get(self.API_URL + product_id, headers=self.HEADERS)
        return response.json()

    def get_products(self, name=None, code=None, barcode=None, page=None, size=None):
        """List all products.

        :param name:(Optional) The name of the product
        :param code: (Optional) The code of the product
        :param barcode: (Optional) The barcode of the product
        :param page: (Optional) The page of the list to be returned
        :param size: (Optional) The quantity of items in the page to be returned

        :return: Products (list/dict json).
        """
        products = '/v1/products'
        # GET
        if name is not None:
            products = f'/v1/products/?name={name}'  # List products by name

        if code is not None:
            products = f'/v1/products/?code={code}'  # List products by code

        if barcode is not None:
            products = f'/v1/products/?barcode={barcode}'  # List products by barcode

        if page is not None:
            products = f'/v1/products/?page={page}'  # List by number of pages

        if size is not None:
            products = f'/v1/products/?size={size}'  # List by quantity of items in the page

        response = requests.get(self.API_URL + products, headers=self.HEADERS)
        return response.json()

    def del_product(self, product_id):
        """Delete product by id

        :param product_id: The id of the product to be deleted ex: e0a928b6-0600-4fb6-929c-fde7b915df2d

        """
        # DELETE
        products = f'/v1/products/{product_id}'
        response = requests.delete(self.API_URL + products, headers=self.HEADERS)
        return response.json()

    def new_product(self, product_list):
        """Create new product.

        :param product_list: (dict) See example folder.
        """
        # POST
        product = '/v1/products'
        response = requests.post(self.API_URL + product, json=product_list, headers=self.HEADERS)
        return response.json()

    def upt_product(self, product_id, product_body):
        """"""
        # PUT
        update_product = f'/v1/products/{product_id}'
        response = requests.put(self.API_URL + update_product, json=product_body, headers=self.HEADERS)
        return response.json()

    def cat_product(self):
        """List product categories"""
        # GET
        cat_product = '/v1/product-categories'
        response = requests.get(self.API_URL + cat_product, headers=self.HEADERS)
        return response.json()

    def cat_product_byId(self, product_id):
        """Get products category by id.

        :param product_id: (string) The id of the product.
        """
        # GET
        cat_product_id = f'/v1/product-categories/{product_id}'  # Get product category by id
        response = requests.get(self.API_URL + cat_product_id, headers=self.HEADERS)
        return response.json()


class Services:
    def __init__(self, api, token):
        """
               :param api: Conta Azul API URL

               :param token: Token generated by auth page
               """

        self.TOKEN = token
        self.API_URL = api
        self.HEADERS = {"Authorization": f"Bearer {self.TOKEN}"}

    def get_service(self):
        # GET
        service = '/v1/services'  # List services by filters
        response = requests.get(self.API_URL + service, headers=self.HEADERS)
        return response.json()

    def get_service_byId(self, service_id):
        # GET
        service = f'/v1/services/{service_id}'  # Get service by id
        response = requests.get(self.API_URL + service, headers=self.HEADERS)
        return response.json()

    def add_service(self, new_service):
        # POST
        service = '/v1/services'  # Create service
        response = requests.post(self.API_URL + service, json=new_service, headers=self.HEADERS)
        return response.json()

    def upt_service(self, service_id, service_body):
        # PUT
        service = f'/v1/services/{service_id}'  # Update service
        response = requests.put(self.API_URL + service, json=service_body, headers=self.HEADERS)
        return response.json()

    def del_service(self, service_id):
        # DELETE
        service = f'/v1/services/{service_id}'  # Delete service
        response = requests.delete(self.API_URL + service, headers=self.HEADERS)
        return response


class Sales:
    def __init__(self, api, token):
        """
               :param api: Conta Azul API URL

               :param token: Token generated by auth page
               """

        self.TOKEN = token
        self.API_URL = api
        self.HEADERS = {"Authorization": f"Bearer {self.TOKEN}"}

    def get_sales(self):
        # GET
        sales = '/v1/sales'  # List sales by filters
        response = requests.get(self.API_URL + sales, headers=self.HEADERS)
        return response.json()

    def get_sales_byId(self, sale_id):
        sales = f'/v1/sales/{sale_id}'  # List sales by filters
        response = requests.get(self.API_URL + sales, headers=self.HEADERS)
        return response.json()

    def upt_sale(self, sale_id, sale_body):
        sale = f'/v1/sales/{sale_id}'  # Update sale
        response = requests.put(self.API_URL + sale, json=sale_body, headers=self.HEADERS)
        return response

    def del_sale(self, sale_id):
        """"  # Delete sale"""
        #DELETE
        sales = f'/v1/sales/{sale_id}'
        response = requests.delete(self.API_URL + sales, headers=self.HEADERS)
        return response

    def new_sale(self, sale_body):
        """# Create sale"""
        # POST
        sales = '/v1/sales'
        response = requests.post(self.API_URL + sales, json=sale_body, headers=self.HEADERS)
        return response.json()


class Customer:
    def __init__(self) -> None:
        pass


class Suppliers:
    def __init__(self) -> None:
        pass


class Plan:
    def __init__(self) -> None:
        pass
